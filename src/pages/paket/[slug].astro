---
import GalleryWrapper from "@components/GalleryWrapper";
import PaginationItem from "@components/PaginationItem";
import MainLayout from "@layouts/MainLayout.astro";
import {
  IconChat,
  IconClock4,
  IconMapPin,
  IconMapPinned,
  IconPeople,
  IconPerson,
} from "@components/Icons";

import { getCollection } from "astro:content";
import Accordion from "@components/Accordion";

export async function getStaticPaths() {
  const entries = await getCollection("paket");

  return entries.map((entry: any) => ({
    params: { slug: entry.data.slug },
  }));
}

const { slug } = Astro.params;

const entries = await getCollection("paket");
let entry = entries.find((item: any) => item.data.slug === slug);

// Handle bromo-midnight default to Malang version
if (slug === "bromo-midnight") {
  entry = entries.find((item: any) => item.data.slug === "bromo-midnight-ml");
}

if (!entry) {
  throw new Error(`No domestik paket found for slug: ${slug}`);
}

const { data } = entry;

// Check if this is a bromo-midnight variant
const isBromoMidnight = slug?.includes("bromo-midnight");
const currentMeetingPoint =
  slug === "bromo-midnight-ml" || slug === "bromo-midnight"
    ? "Malang"
    : slug === "bromo-midnight-sby"
      ? "Surabaya"
      : null;

export const prerender = true;
---

<MainLayout pageTitle={data.title}>
  <section class="max-w-7xl mx-auto lg:px-8 sm:px-6 px-4 dark:text-[#f3f4f6]">
    <h1 class="sm:text-4xl text-3xl font-bold mb-4">{data.title}</h1>
    <div class="flex flex-wrap gap-4 text-sm font-medium text-[#9ca3af]">
      <div class="flex items-center">
        <IconMapPin />
        {data.location}
      </div>
      <div class="flex items-center gap-x-1">
        <IconClock4 />
        {
          data.itineraries.length > 1
            ? `${data.itineraries.length} Days`
            : `${data.itineraries.length} Day`
        }
      </div>
      <div class="flex items-center gap-x-1">
        {data.jenistrip === "Private" ? <IconPerson /> : <IconPeople />}
        {data.jenistrip}
      </div>
    </div>
  </section>

  <section class="max-w-7xl mx-auto lg:px-8 sm:px-6 px-4 mt-8">
    <GalleryWrapper images={data.images} bucketUrl="/images" client:load />
  </section>

  <section
    class="max-w-7xl mx-auto lg:px-8 sm:px-6 px-4 mt-8 dark:text-[#f3f4f6]"
  >
    <div class="border border-gray-300 rounded-lg sm:p-6 p-4">
      <h2 class="title-heading">Overview</h2>
      <article class="space-y-2">
        {
          data.descriptions.map((text: any, index: number) => (
            <p
              class={`text-gray-800 dark:text-[#f3f4f6] sm:text-base text-sm
                  ${index === 0 ? "font-semibold" : "font-medium"}`}
            >
              {text.text}
            </p>
          ))
        }
      </article>
      <table class="w-full mt-8 text-sm sm:text-base">
        <tbody>
          <tr>
            <td class="p-2 border border-gray-400 font-semibold sm:w-1/4 w-1/2">
              Meeting Point
            </td>
            <td class="p-2 border border-gray-400">
              {
                isBromoMidnight ? (
                  <div>
                    <select
                      id="meeting-point-select"
                      class="w-full p-2 border border-gray-300 rounded-md bg-white dark:bg-gray-800 dark:border-gray-600 dark:text-white text-sm font-medium"
                    >
                      <option
                        value="Malang"
                        selected={currentMeetingPoint === "Malang"}
                      >
                        Malang
                      </option>
                      <option
                        value="Surabaya"
                        selected={currentMeetingPoint === "Surabaya"}
                      >
                        Surabaya
                      </option>
                    </select>
                  </div>
                ) : data.meetingpoint.length === 1 ? (
                  <p class="font-semibold">{data.meetingpoint[0]}</p>
                ) : (
                  <>
                    <div class="grid grid-cols-1 sm:grid-cols-2">
                      {data.meetingpoint.map((item) => (
                        <li class="list-inside">{item}</li>
                      ))}
                    </div>
                    <p class="text-sm italic mt-4">
                      *Sesuai permintaan (misal hotel/stasiun/bandara/terminal)
                    </p>
                  </>
                )
              }
            </td>
          </tr>
          <tr>
            <td class="p-2 border border-gray-400 font-semibold">
              Waktu Mulai
            </td>
            <td class="p-2 border border-gray-400">
              {
                data.itineraries.length > 1 ? (
                  <>
                    <span class="font-medium">Hari 1</span>,{" "}
                    {data.itineraries[0].items[0].time}
                  </>
                ) : (
                  data.itineraries[0].items[0].time
                )
              } WIB
            </td>
          </tr>
          <tr>
            <td class="p-2 border border-gray-400 font-semibold">
              Waktu Selesai
            </td>
            <td class="p-2 border border-gray-400">
              {
                data.itineraries.length > 1 && (
                  <>
                    <span class="font-medium">
                      Hari {data.itineraries.length}
                    </span>
                    ,
                  </>
                )
              }
              {
                data.itineraries[data.itineraries.length - 1].items[
                  data.itineraries[data.itineraries.length - 1].items.length - 1
                ].time
              } WIB
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </section>

  <section
    class="max-w-7xl mx-auto lg:px-8 sm:px-6 px-4 mt-8 dark:text-[#f3f4f6]"
  >
    <div class="border border-gray-300 rounded-lg sm:p-6 p-4">
      <h2 class="title-heading">Destinasi</h2>
      <div
        class="sm:grid hidden grid-cols-1 md:grid-cols-2 gap-2 max-h-48 sm:max-h-none overflow-y-auto"
      >
        {
          data.destinasi.map((destinasi: any) => (
            <div class="flex items-center gap-x-1 text-deep-blue dark:text-[#f3f4f6]">
              <IconMapPinned />
              <span class="text-black dark:text-[#f3f4f6]">{destinasi}</span>
            </div>
          ))
        }
      </div>
      <div class="sm:hidden block">
        <PaginationItem content={data.destinasi} client:load />
      </div>
    </div>
  </section>

  <section
    class="max-w-7xl mx-auto lg:px-8 sm:px-6 px-4 mt-8 dark:text-[#f3f4f6]"
  >
    <div class="border border-gray-300 rounded-lg sm:p-6 p-4">
      <h2 class="title-heading">Itinerary</h2>
      <div class="space-y-2">
        <Accordion data={data.itineraries} faqPage={false} client:load />
        <p class="sm:text-sm text-xs text-end italic mt-4">
          <strong>*</strong> Hanya sebagai acuan dasar, dalam pelaksanaanya menyesuaikan
          dengan kondisi yang ada.
        </p>
      </div>
    </div>
  </section>

  <section
    class="max-w-7xl mx-auto lg:px-8 sm:px-6 px-4 mt-8 dark:text-[#f3f4f6]"
  >
    <div class="border border-gray-300 rounded-lg sm:p-6 p-4">
      <h2 class="title-heading">Fasilitas</h2>
      <div class="grid sm:grid-cols-2 grid-cols-1 gap-4">
        <div class="col-span-1 border border-deep-blue dark:border-[#6b7280]">
          <p
            class="font-semibold text-center bg-deep-blue dark:bg-[#6b7280] text-white py-2"
          >
            Include
          </p>
          <div
            class="sm:grid hidden grid-cols-1 md:grid-cols-2 gap-2 max-h-48 sm:max-h-none overflow-y-auto p-4"
          >
            {
              data.fasilitas.include.map((include: any) => (
                <ul class="pl-4 list-disc">
                  <li class="">{include}</li>
                </ul>
              ))
            }
          </div>
          <div class="sm:hidden block">
            <PaginationItem
              content={data.fasilitas.include}
              dataType="fasilitas"
              client:load
            />
          </div>
        </div>
        <div class="col-span-1 border border-deep-blue dark:border-[#6b7280]">
          <p
            class="font-semibold text-center bg-deep-blue dark:bg-[#6b7280] text-white py-2"
          >
            Exclude
          </p>
          <div
            class="sm:grid hidden grid-cols-1 md:grid-cols-2 gap-2 max-h-48 sm:max-h-none overflow-y-auto p-4"
          >
            {
              data.fasilitas.exclude.map((exclude: any) => (
                <ul class="pl-4 list-disc">
                  <li class="">{exclude}</li>
                </ul>
              ))
            }
          </div>
          <div class="sm:hidden block">
            <PaginationItem
              content={data.fasilitas.exclude}
              dataType="fasilitas"
              client:load
            />
          </div>
        </div>
      </div>
    </div>
  </section>

  <section
    class="max-w-7xl mx-auto lg:px-8 sm:px-6 px-4 mt-8 dark:text-[#f3f4f6]"
  >
    <div class="border border-gray-300 rounded-lg sm:p-6 p-4">
      <h2 class="title-heading">Pricelist</h2>
      <div class="overflow-x-auto">
        <table class="w-full mb-4">
          <thead>
            <tr class="bg-deep-blue dark:bg-[#6b7280] text-white text-center">
              <th class="px-4 py-2 font-semibold border">Jumlah Peserta</th>
              <th class="px-4 py-2 font-semibold border">Harga per pax</th>
            </tr>
          </thead>
          <tbody>
            {
              data.price
                .slice()
                .sort((a: any, b: any) => a - b)
                .map((item: any, index: number) => {
                  const pax = data.price.length + 1 - index;
                  return (
                    <tr class="text-center">
                      <td class="px-4 py-2 border">{pax}</td>
                      <td class="px-4 py-2 border font-medium">
                        Rp. {`${Number(item).toLocaleString("id-ID")}.000`}
                      </td>
                    </tr>
                  );
                })
            }
          </tbody>
        </table>
        <p class="sm:text-sm text-xs italic">
          {`*Lebih dari ${data.price.length + 1} orang, silakan hubungi kami.`}
        </p>
      </div>
    </div>
    <div class="flex justify-center mt-8">
      <a
        id="whatsapp-link"
        class="inline-flex gap-x-1 items-center justify-center w-fit mt-2 py-2 px-4 bg-amber-400 hover:bg-deep-blue text-black hover:text-white hover:scale-105 ring-1 ring-gray-800 rounded-full font-semibold transition-all duration-300"
        href={`https://wa.me/6285157276433/?text=Hi%20Badak%20Gunung!%20Saya%20mau%20tanya%20tentang%20${encodeURIComponent(data.title || "")}`}
        target="_blank"
        rel="noopener noreferrer"
      >
        <IconChat />
        Pesan Sekarang
      </a>
    </div>
  </section>
</MainLayout>

<script>
  // Add functionality for meeting point selector with page reload
  document.addEventListener("DOMContentLoaded", function () {
    const meetingPointSelect = document.getElementById(
      "meeting-point-select"
    ) as HTMLSelectElement;
    const whatsappLink = document.getElementById(
      "whatsapp-link"
    ) as HTMLAnchorElement;

    if (meetingPointSelect && whatsappLink) {
      // Update WhatsApp link based on current selection
      function updateWhatsAppLink() {
        const selectedPoint = meetingPointSelect.value;
        const packageTitle = (
          document.querySelector("h1") as HTMLHeadingElement
        ).textContent;

        let message = `Hi%20Badak%20Gunung!%20Saya%20mau%20tanya%20tentang%20${encodeURIComponent(packageTitle || "")}`;

        if (selectedPoint) {
          message += `%20dengan%20meeting%20point%20di%20${encodeURIComponent(selectedPoint)}`;
        }

        whatsappLink.href = `https://wa.me/6285157276433/?text=${message}`;
      }

      // Handle meeting point change with page reload
      meetingPointSelect.addEventListener("change", function () {
        const selectedPoint = this.value;
        const currentUrl = window.location.pathname;

        // Determine the new slug based on selection
        let newSlug;
        if (selectedPoint === "Malang") {
          newSlug = "bromo-midnight-ml";
        } else if (selectedPoint === "Surabaya") {
          newSlug = "bromo-midnight-sby";
        }

        // Reload page with new slug if it's different from current
        if (newSlug) {
          const newUrl = currentUrl.replace(/\/[^\/]+$/, `/${newSlug}`);
          if (newUrl !== currentUrl) {
            window.location.href = newUrl;
          }
        }
      });

      // Initialize WhatsApp link on page load
      updateWhatsAppLink();
    }
  });
</script>
